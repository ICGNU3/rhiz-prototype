version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rhiz-postgres
    environment:
      POSTGRES_DB: rhiz_db
      POSTGRES_USER: rhiz_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rhiz_secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - rhiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rhiz_user -d rhiz_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Flask Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rhiz-backend
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DATABASE_URL=postgresql://rhiz_user:${POSTGRES_PASSWORD:-rhiz_secure_password}@postgres:5432/rhiz_db
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
      - PORT=5000
      - HOST=0.0.0.0
      - WORKERS=4
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rhiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs
      - ./static/uploads:/app/static/uploads

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rhiz-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - rhiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional - for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: rhiz-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-rhiz_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rhiz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  rhiz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16