name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend linting and testing
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier check
        working-directory: ./frontend
        run: npm run format:check
        continue-on-error: false

      - name: TypeScript type checking
        working-directory: ./frontend
        run: npm run type-check
        continue-on-error: false

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: frontend-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Jest unit tests
        working-directory: ./frontend
        run: npm run test:ci
        env:
          CI: true

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend linting and testing
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy pylint

      - name: Run Black formatter check
        run: black --check --diff .
        continue-on-error: false

      - name: Run isort import sorting check
        run: isort --check-only --diff .
        continue-on-error: false

      - name: Run flake8 linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: false

      - name: Run flake8 full check
        run: flake8 . --count --max-complexity=10 --max-line-length=88 --statistics
        continue-on-error: false

      - name: Run MyPy type checking
        run: mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Run Pylint
        run: pylint **/*.py --fail-under=8.0
        continue-on-error: true

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_rhiz
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-flask pytest-mock

      - name: Run pytest with coverage
        run: pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_rhiz
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend build verification
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend for production
        working-directory: ./frontend
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        working-directory: ./frontend
        run: |
          ls -la dist/
          du -sh dist/
          echo "Build size: $(du -sh dist/ | cut -f1)"

  # E2E tests with Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_rhiz
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Start backend server
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_rhiz
          export FLASK_ENV=testing
          export SECRET_KEY=test-secret-key
          python main.py &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_rhiz
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key

      - name: Run E2E tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:5000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python security check with safety
        run: |
          python -m pip install --upgrade pip safety
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Node.js security audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate
        continue-on-error: true

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment requirements
        run: |
          echo "‚úÖ All tests passed"
          echo "‚úÖ Frontend build successful"
          echo "‚úÖ Backend tests passed"
          echo "‚úÖ E2E tests completed"
          echo "üöÄ Ready for deployment"

      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          echo "Deployment ready at $(date)" > deployment/status.txt
          echo "Commit: ${{ github.sha }}" >> deployment/status.txt
          echo "Branch: ${{ github.ref }}" >> deployment/status.txt

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-ready
          path: deployment/
          retention-days: 7

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test, backend-lint, backend-test, e2e-tests]
    if: failure()
    steps:
      - name: Notify team of CI failure
        run: |
          echo "‚ùå CI Pipeline Failed"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Failed jobs need attention"