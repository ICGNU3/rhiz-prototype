Full Routing, Navigation & Redundancy Cleanup for Rhiz App
Refactor and audit the full codebase of the Rhiz project to ensure all buttons, links, and UI navigation elements:

Correctly route to the intended React component views (e.g., pressing a dashboard button takes the user to /app/dashboard and not an undefined route or legacy page).

Remove any outdated, broken, or unused navigation paths or buttons (especially from old HTML templates, unused components, or routing leftovers).

Ensure React Router (in frontend/src/router.tsx or equivalent) includes all necessary pages, and confirm that nested routes (e.g. /app/onboarding/*) load the correct subcomponents.

Replace all legacy navigation logic (like href-based links or Flask render_template routing) with modern React <Link> or useNavigate() logic where appropriate.

Fix broken button functionality across React components — ensure that all buttons have onClick handlers correctly wired to route transitions, state updates, or API calls as intended.

Audit frontend pages/ and components/ folders for any unused or duplicate files (e.g., old HTML-based contact views that are no longer in use).

Consolidate styles by removing legacy CSS or unused Tailwind/Bootstrap files. Clean up frontend/src/styles and ensure consistent design.

Review and align Flask API routing (in api_routes.py) with frontend expectations:

Check if endpoints like /api/contacts, /api/goals, /api/trust are hit correctly.

Update or remove endpoints unused by current React components.

Ensure every React page has a clear purpose and complete state cycle (data fetch → loading state → render → interaction → success/failure feedback).

Create a routing map (commented or logged) showing:

Each frontend route

The React page/component it loads

Any API calls it depends on

UI triggers that navigate to it

Final output should:

Guarantee that navigation from all pages works as expected

Remove any dead links, duplicated pages, or unused imports

Align frontend UX flow with backend API and React Router routing

Result in a clean, consistent, responsive single-page experience