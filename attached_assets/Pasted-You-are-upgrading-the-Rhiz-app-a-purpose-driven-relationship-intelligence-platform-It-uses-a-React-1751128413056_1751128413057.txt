You are upgrading the Rhiz app, a purpose-driven relationship intelligence platform. It uses a React + TypeScript frontend and a Python Flask backend, with PostgreSQL, OpenAI, and Resend integrations. The project has recently migrated from template-based Flask rendering to a modern single-page app (SPA) structure. Your task is to refactor, expand, and evolve the codebase for production readiness and future scale.

Focus areas include:

✅ 1. CODEBASE REORGANIZATION & STRUCTURE
Restructure backend/ into:

services/: business logic (e.g. trust engine, sync)

routes/: Flask route modules (auth, contacts, etc.)

models/: SQLAlchemy models

utils/: helpers, decorators, OpenAI handlers

Split large files like api_routes.py into modular blueprints.

Move all unused legacy logic, Flask templates, and broken imports to /deprecated for clarity.

Create a README.md inside each subfolder describing purpose, dev instructions.

✅ 2. INTEGRATE MISSING INTELLIGENCE MODULES
Stub or implement these missing modules (or create AI-powered versions):

contact_intelligence.py: Surface AI-based relationship signals from contact metadata, recency, depth.

trust_insights.py: Compute basic trust scores, relationship strength, communication history.

social_integrations.py: Add scaffolds for LinkedIn, X.com, Google Contacts OAuth sync (use dummy endpoints for now).

Connect these modules to /api/trust/* and /api/contacts/* endpoints.

✅ 3. ELEVATE USER EXPERIENCE (UX FLOW)
Fully define onboarding flow (via /app/onboarding):

Step 1: Verify magic link + show welcome

Step 2: Sync or import contacts

Step 3: Define 1–3 meaningful goals

Step 4: Analyze network with AI

Final: Redirect to /app/dashboard

Show progress bar, animate transitions, and cache form state with localStorage or Context.

✅ 4. ADVANCE API + FRONTEND COHESION
Ensure all frontend/src/pages/* are fully connected to Flask via React Query or axios.

Rebuild Contacts and CRM views with modular components:

Use tables with search/sort

Allow batch upload of contacts

Add dropdowns to tag “trust score,” “last interaction,” “goals aligned”

Add global toast + error handler system to React app.

✅ 5. TRUST & INSIGHT ENGINE (BETA)
Begin seeding data models for relationship intelligence:

TrustScore: frequency, last updated, mutuality, sync source

RecommendationModel: who you should reach out to and why (weekly digest)

ReflectionPrompt: prompts based on AI to deepen select relationships

Add /api/trust/digest and return top 3 priority contacts.

✅ 6. PLATFORM SETTINGS SYSTEM
On /app/settings, allow:

Notification preferences

Sync preferences

Account deletion + data export

Toggle experimental features (e.g. Trust AI v1)

✅ 7. STRENGTHEN THE LANGUAGE (COPY UPDATE)
Replace any mention of “networking” with “deepening relationships” or “strengthening bonds”.

Match all internal copy to your ethos of relational intelligence, trust mapping, and purpose-aligned action.

Update nav bar, onboarding descriptions, and error messages accordingly.

✅ 8. TECHNICAL UPGRADES
Add Alembic or Flask-Migrate for DB migrations

Implement .env.template and sanitize secrets

Optimize React build with vite.config.ts (minification, lazy loading)

Run Lighthouse audits on the frontend and fix accessibility/performance flags

Add Prettier + ESLint for frontend and black/flake8 for Python formatting

✅ 9. FUTURE EXTENSIONS
Add optional AI agent on /app/intelligence that responds based on goals + trust signals

Enable import of LinkedIn CSVs or scrape contact metadata for testing

Create a /api/activity/log endpoint that saves all interactions for analytics

⚠️ You must preserve working auth flow, goal system, dashboard analytics, and core database structure. All upgrades should be backward compatible with the current PostgreSQL schema.