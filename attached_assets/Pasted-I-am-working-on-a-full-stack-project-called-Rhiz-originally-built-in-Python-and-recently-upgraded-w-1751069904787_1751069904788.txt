I am working on a full-stack project called Rhiz, originally built in Python and recently upgraded with a React frontend. The backend is still Python (Flask or FastAPI), and the frontend is React with some reused components and legacy UI artifacts. Our goal is to organize and optimize this codebase for scalability, modularity, clarity, and rapid collaboration.

You will receive access to the full zipped project. Your task is to:

1. Perform a full audit

Identify unused files, components, routes, and code fragments.

Detect any naming inconsistencies, anti-patterns, or dead ends.

Create a clear file/function map for both frontend and backend.

2. Organize the codebase using modern standards:

Group React components by function (pages, shared, atomic, etc.)

Isolate API calls into a single service layer (/services or /api).

Separate all styles, constants, utils, and context logic.

Apply linting rules and folder-level .env configurations.

3. Modernize and optimize

Convert any legacy JS into modern ES6+ syntax.

Modularize backend routes and database logic (Blueprints if Flask, Routers if FastAPI).

Refactor all forms and input handlers for clarity and validation.

Upgrade frontend state logic (move to hooks or context if needed).

4. Improve documentation

Auto-generate a clean README.md with structure, setup, commands, and contribution guidelines.

Add comments for major functions and config files.

5. Bonus improvements (if possible):

Set up a base component for layout and navigation.

Add Prettier + ESLint configs.

Scaffold a basic CI pipeline with GitHub Actions or Replit-compatible scripts.

Provide a separate /scripts folder for database seeds, test data, and migrations.

Assume this app will eventually scale into a protocol interface with advanced AI logic and graph visualizations. Maintain flexibility and clarity. Do not break the current working functionality. Propose every destructive or structural change in a changelog or migration note format.

Once optimized, return:

A cleaned, restructured codebase

A visual folder tree of the new structure

A migration guide if needed

Key TODOs for expanding features like Trust Insights, contact sync, and AI memory

