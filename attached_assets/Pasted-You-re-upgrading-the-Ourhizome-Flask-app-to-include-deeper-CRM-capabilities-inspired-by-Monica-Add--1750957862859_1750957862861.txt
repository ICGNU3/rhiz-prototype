You’re upgrading the Ourhizome Flask app to include deeper CRM capabilities inspired by Monica. Add the following five features to the app using Flask, SQLAlchemy, Bootstrap 5, and Jinja2 templates:

---

1. 🔁 **Automatic Reminders & Notifications**

**Goal:** Remind users to follow up with contacts on key dates (birthdays, anniversaries, last interaction date, or custom check-ins).

- Add `reminders` table to the database linked to `users` and `contacts`.
- Support recurring reminders (weekly, monthly, yearly).
- Create background job (use `apscheduler` or Celery + Redis if available) to check for due reminders and trigger in-app + email notifications.
- UI: Add reminder creation UI on each contact’s page. Add a "Reminders" tab to dashboard with upcoming events.

---

2. 🧷 **Relationship Labels + History Tracking**

**Goal:** Let users label relationships (e.g., investor, advisor, collaborator) and automatically track each interaction with a contact.

- Add `relationship_type` field to contacts (e.g., enum or text tag).
- Add `interaction_logs` table (timestamp, interaction type, notes, contact_id, user_id).
- Log new AI-generated messages or manual outreach automatically.
- UI: Display timeline history on each contact’s profile page.

---

3. 📓 **Private Journal Entries**

**Goal:** Let users journal or add subjective notes about each contact.

- Add `journal_entries` table linked to contacts and users.
- Allow rich-text or markdown support (consider `Quill.js` or a basic textarea input).
- UI: Contact profile should include a Journal tab to create and view entries.

---

4. ✅ **Task Management / To-Dos per Contact**

**Goal:** Allow users to set actionable tasks tied to each contact (e.g., "Send deck next week").

- Add `tasks` table (task description, due date, status, linked to contact + user).
- Tasks should show on both the Dashboard and on the individual contact profile.
- Optional: Add basic drag-and-drop status like “To Do,” “In Progress,” “Done.”

---

5. 📎 **File Attachments or Document Links per Contact**

**Goal:** Let users attach files (e.g., PDFs, decks, notes) or add URLs to each contact.

- Add `attachments` table (filename, link, upload timestamp, file_path, contact_id, user_id).
- Allow secure upload to /static/uploads with file size/type restrictions.
- UI: Show uploaded files in a “Files” tab on each contact profile. Option to add link-only if file upload is skipped.

---

🔒 All data should be tied to individual user accounts with scoped access per user. Use Flask-Login or similar if not already implemented.

📬 Optional: Integrate reminder notifications via Resend (already replacing SendGrid) to send scheduled follow-ups or alerts.

---

Reply with confirmation once these features are scaffolded or request a follow-up prompt to break out each into isolated micro-commits or API endpoints.