Create a new Replit Python project called founder-network-ai. Include Flask, SQLite, and the OpenAI library. Use Replit Secrets to store the API key.

bash
Copy
Edit
pip install flask openai sqlite-utils python-dotenv
Then set OpenAI key:

bash
Copy
Edit
echo "OPENAI_API_KEY=your-key" > .env
In Replit, use Secrets tab to add OPENAI_API_KEY.

üìÑ PHASE 2: Define Core Schema
üîß Prompt 2 ‚Äî Define the SQLite database schema
Prompt:

Create schema.sql with the following schema and auto-run it on first boot.

sql
Copy
Edit
-- users
CREATE TABLE IF NOT EXISTS users (
  id TEXT PRIMARY KEY,
  email TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- contacts
CREATE TABLE IF NOT EXISTS contacts (
  id TEXT PRIMARY KEY,
  user_id TEXT,
  name TEXT,
  email TEXT,
  phone TEXT,
  twitter TEXT,
  linkedin TEXT,
  notes TEXT,
  last_interaction TIMESTAMP,
  tags TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- goals
CREATE TABLE IF NOT EXISTS goals (
  id TEXT PRIMARY KEY,
  user_id TEXT,
  title TEXT,
  description TEXT,
  embedding TEXT, -- JSON array of floats
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ai_suggestions
CREATE TABLE IF NOT EXISTS ai_suggestions (
  id TEXT PRIMARY KEY,
  contact_id TEXT,
  goal_id TEXT,
  suggestion TEXT,
  confidence REAL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
üß† PHASE 3: Embed Goals with OpenAI
üîß Prompt 3 ‚Äî Generate and store goal embeddings
Prompt:

Use OpenAI to create an embedding for each goal‚Äôs description and store it in the database.

python
Copy
Edit
import openai
import sqlite3
import json

openai.api_key = os.getenv("OPENAI_API_KEY")

def embed_goal(goal_description):
    response = openai.Embedding.create(
        model="text-embedding-3-small",
        input=goal_description
    )
    return json.dumps(response['data'][0]['embedding'])

def save_goal_with_embedding(user_id, title, description):
    embedding = embed_goal(description)
    goal_id = str(uuid.uuid4())
    conn = sqlite3.connect("db.sqlite3")
    conn.execute("INSERT INTO goals VALUES (?, ?, ?, ?, ?, datetime('now'))",
                 (goal_id, user_id, title, description, embedding))
    conn.commit()
    return goal_id
üîç PHASE 4: Contact Matching Logic
üîß Prompt 4 ‚Äî Match contacts to a goal using cosine similarity
Prompt:

Add a function to load contact bios (notes, LinkedIn bios, tweets), generate their embeddings, and compare them to the goal‚Äôs embedding.

python
Copy
Edit
import numpy as np
from numpy.linalg import norm

def cosine_similarity(a, b):
    return np.dot(a, b) / (norm(a) * norm(b))

def match_contacts_to_goal(goal_id):
    conn = sqlite3.connect("db.sqlite3")
    goal_row = conn.execute("SELECT embedding FROM goals WHERE id = ?", (goal_id,)).fetchone()
    goal_vector = json.loads(goal_row[0])

    matches = []
    for row in conn.execute("SELECT id, name, notes FROM contacts"):
        contact_vector = embed_goal(row[2] or row[1])  # use notes or name
        contact_vector = json.loads(contact_vector)
        score = cosine_similarity(goal_vector, contact_vector)
        matches.append((row[0], row[1], score))
    
    return sorted(matches, key=lambda x: -x[2])[:10]
‚úâÔ∏è PHASE 5: AI Message Generator
üîß Prompt 5 ‚Äî Generate a smart outreach message
Prompt:

Generate a message that connects the user‚Äôs goal with a suggested contact, based on tone and history.

python
Copy
Edit
def generate_message(contact_name, goal_title, goal_description, tone="warm"):
    prompt = f"""
You are helping a founder deepen a connection with {contact_name}.
The founder‚Äôs goal is: "{goal_title}".

Details: {goal_description}

Write a {tone} message to re-engage this contact.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response['choices'][0]['message']['content']
üßë‚Äçüíª PHASE 6: Basic UI (HTML or Replit Webview)
üîß Prompt 6 ‚Äî Create a simple web interface
Prompt:

Build a single-page UI in Flask with:

A form to enter a goal

A list of matched contacts with AI message previews

A ‚Äúcopy message‚Äù button for each suggestion

Example HTML route:

python
Copy
Edit
@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        goal_title = request.form["goal"]
        goal_id = save_goal_with_embedding(user_id, goal_title, goal_title)
        matches = match_contacts_to_goal(goal_id)
        messages = [(name, generate_message(name, goal_title, goal_title)) for _, name, _ in matches]
        return render_template("results.html", goal=goal_title, messages=messages)
    return render_template("index.html")
üì¨ PHASE 7: Follow-Up Logging
üîß Prompt 7 ‚Äî Save interactions manually
Prompt:

Add a form under each AI message to let user log the outcome (sent, replied, ignored) and notes.

sql
Copy
Edit
CREATE TABLE IF NOT EXISTS contact_interactions (
  id TEXT PRIMARY KEY,
  contact_id TEXT,
  user_id TEXT,
  status TEXT,
  notes TEXT,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
üìà PHASE 8: Final Touches & Deployment
üîß Prompt 8 ‚Äî Deploy with Replit web server
Prompt:

Run the Flask app in Replit, test with real goals + contacts, and use render_template() to display the interface.

Also:

Preload some mock contacts (or import via CSV)

Store 3‚Äì5 example goals for demoing to founders

Run sample output through OpenAI to refine tone

‚úÖ After 24 Hours, You'll Have:
Contacts and goals stored and embedded

Smart goal ‚Üí contact matching using embeddings

GPT-powered message generator

Interaction logger

Simple UI that shows all this in one view

Want me to turn this into a GitHub repo or drop a working Replit link to fork and launch instantly?









