You are working on the Rhiz intelligent relationship manager built with a React + Vite + TypeScript frontend and a Python Flask backend using PostgreSQL.

The architecture is 90% complete. You are tasked with:

1. Fixing backend Python import errors
Some modules referenced in api_routes.py are missing or unresolved:

contact_intelligence

contact_sync_engine

social_integrations

trust_insights

First, check if these are meant to be:

Internal Python modules that need to be written or moved into /services or /utils

External libraries that should be installed via pip

If missing, scaffold minimal functional versions to unblock API routes. Use best practice modularity (/services/contact_intelligence.py, etc.).

2. Completing the contact upload during onboarding

Currently, this breaks in /app/onboarding.

Fix the import logic to support CSV upload, parsing, and mapping fields correctly.

Integrate OAuth-based sync options (Google Contacts, LinkedIn, X.com) as future stubs.

Ensure uploaded contacts are saved to PostgreSQL using models.Contact or equivalent schema.

3. Finishing all React–API integrations

In React pages under /frontend/src/pages/, connect missing views to Flask API endpoints under /api/ using fetch() or axios via React Query.

Confirm bi-directional state updates (write + read) for all pages:

GoalsPage.tsx ↔ /api/goals

ContactsPage.tsx ↔ /api/contacts

TrustPage.tsx ↔ /api/trust

CrmPage.tsx ↔ /api/crm

4. Backend Data Validation + DB Migration

Validate SQLAlchemy models in models.py match current API expectations.

Add migration script if any schema mismatch or missing tables (consider using Alembic or raw SQL if needed).

5. Polishing the onboarding flow

After magic link login, user is routed to /app/onboarding.

Ensure all 4 steps work: welcome → contact import → goal setup → network reflection.

After final step, redirect to /app/dashboard.

6. Remove unused legacy code

Clean old HTML templates (only keep 6 infrastructure files in /templates)

Purge stale routes from Flask (main.py, app.py) that were for template rendering

Remove dead React code if it no longer connects to backend

7. Production Readiness

Confirm .env variables are working in both dev and deployed modes:

DATABASE_URL

SESSION_SECRET

RESEND_API_KEY

OPENAI_API_KEY

Ensure npm run build creates a deployable frontend and gunicorn serves Flask cleanly.

You are allowed to create minimal placeholder logic if a full implementation would delay fixes. Use stubs where integration is planned. Prioritize contact import and API cleanup.

