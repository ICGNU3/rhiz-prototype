"""Initial migration with users, contacts, goals, trust_stats, import_history

Revision ID: 960e085e8912
Revises: 
Create Date: 2025-06-28 23:54:15.506968

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '960e085e8912'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trust_insights')
    op.drop_table('contact_sources')
    op.drop_table('sync_jobs')
    op.drop_table('rhizomatic_insights')
    op.drop_table('network_analytics')
    op.drop_table('invite_requests')
    op.drop_table('sync_logs')
    op.drop_table('oauth_states')
    op.drop_table('import_history')
    with op.batch_alter_table('ai_suggestions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('title', sa.String(length=255), nullable=False))
        batch_op.add_column(sa.Column('content', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('confidence_score', sa.Float(), nullable=True))
        batch_op.alter_column('id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
        batch_op.alter_column('goal_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=True)
        batch_op.alter_column('suggestion_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               nullable=False,
               existing_server_default=sa.text("'goal_match'::text"))
        batch_op.alter_column('status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::text"))
        batch_op.drop_constraint(batch_op.f('ai_suggestions_contact_id_fkey'), type_='foreignkey')
        batch_op.drop_column('contact_id')
        batch_op.drop_column('reasoning')
        batch_op.drop_column('outreach_message')
        batch_op.drop_column('suggested_action')
        batch_op.drop_column('confidence')

    with op.batch_alter_table('contact_interactions', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False)
        batch_op.alter_column('contact_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
        batch_op.alter_column('interaction_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('direction',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'outbound'::text"))
        batch_op.alter_column('sentiment',
               existing_type=sa.TEXT(),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text("'neutral'::text"))
        batch_op.drop_constraint(batch_op.f('contact_interactions_user_id_fkey'), type_='foreignkey')
        batch_op.drop_column('user_id')
        batch_op.drop_column('response_time_hours')
        batch_op.drop_column('method')
        batch_op.drop_column('response_received')
        batch_op.drop_column('follow_up_needed')
        batch_op.drop_column('tags')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('follow_up_date')
        batch_op.drop_column('follow_up_action')
        batch_op.drop_column('subject')

    with op.batch_alter_table('contacts', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('phone',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('twitter',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('linkedin',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
        batch_op.alter_column('handle',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('relationship_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True,
               existing_server_default=sa.text("'Contact'::text"))
        batch_op.alter_column('warmth_label',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'Cold'::text"))
        batch_op.alter_column('last_contact_method',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('priority_level',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'Medium'::text"))
        batch_op.alter_column('introduced_by',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('location',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('company',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('source',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('goals', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
        batch_op.alter_column('title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('goal_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True,
               existing_server_default=sa.text("'General'::text"))
        batch_op.alter_column('timeline',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True,
               existing_server_default=sa.text("'This Quarter'::text"))
        batch_op.alter_column('status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'Active'::text"))
        batch_op.alter_column('priority_level',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'Medium'::text"))

    with op.batch_alter_table('journal_entries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sentiment_score', sa.Float(), nullable=True))
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.alter_column('tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])
        batch_op.drop_column('ai_insights')
        batch_op.drop_column('related_insight_id')
        batch_op.drop_column('related_goal_id')
        batch_op.drop_column('is_private')
        batch_op.drop_column('mood_score')
        batch_op.drop_column('entry_type')
        batch_op.drop_column('related_contact_id')
        batch_op.drop_column('energy_level')

    with op.batch_alter_table('user_auth_tokens', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text('(gen_random_uuid())::text'))
        batch_op.alter_column('email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('token',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
        batch_op.alter_column('google_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('magic_link_token',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('subscription_tier',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'explorer'::text"))
        batch_op.alter_column('stripe_customer_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('stripe_subscription_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('subscription_status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'active'::text"))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('subscription_status',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'active'::text"))
        batch_op.alter_column('stripe_subscription_id',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('stripe_customer_id',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('subscription_tier',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'explorer'::text"))
        batch_op.alter_column('magic_link_token',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('google_id',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('user_auth_tokens', schema=None) as batch_op:
        batch_op.alter_column('token',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text('(gen_random_uuid())::text'))

    with op.batch_alter_table('journal_entries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('energy_level', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('related_contact_id', sa.UUID(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('entry_type', sa.VARCHAR(length=50), server_default=sa.text("'reflection'::character varying"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('mood_score', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_private', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('related_goal_id', sa.UUID(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('related_insight_id', sa.UUID(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('ai_insights', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('tags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.drop_column('sentiment_score')

    with op.batch_alter_table('goals', schema=None) as batch_op:
        batch_op.alter_column('priority_level',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'Medium'::text"))
        batch_op.alter_column('status',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'Active'::text"))
        batch_op.alter_column('timeline',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'This Quarter'::text"))
        batch_op.alter_column('goal_type',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'General'::text"))
        batch_op.alter_column('title',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('contacts', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('source',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('company',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('location',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('introduced_by',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('priority_level',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'Medium'::text"))
        batch_op.alter_column('last_contact_method',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('warmth_label',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'Cold'::text"))
        batch_op.alter_column('relationship_type',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'Contact'::text"))
        batch_op.alter_column('handle',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('linkedin',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('twitter',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('phone',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('contact_interactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('follow_up_action', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('follow_up_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('follow_up_needed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('response_received', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('method', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('response_time_hours', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('contact_interactions_user_id_fkey'), 'users', ['user_id'], ['id'])
        batch_op.alter_column('sentiment',
               existing_type=sa.Float(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'neutral'::text"))
        batch_op.alter_column('direction',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'outbound'::text"))
        batch_op.alter_column('interaction_type',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('contact_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('ai_suggestions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('confidence', sa.REAL(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('suggested_action', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('outreach_message', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('reasoning', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('contact_id', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('ai_suggestions_contact_id_fkey'), 'contacts', ['contact_id'], ['id'])
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::text"))
        batch_op.alter_column('suggestion_type',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               nullable=True,
               existing_server_default=sa.text("'goal_match'::text"))
        batch_op.alter_column('goal_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.drop_column('confidence_score')
        batch_op.drop_column('content')
        batch_op.drop_column('title')

    op.create_table('import_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('import_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('total_contacts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('successful_imports', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_imports', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'completed'::character varying"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('import_history_pkey'))
    )
    op.create_table('oauth_states',
    sa.Column('state_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('redirect_uri', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('state_token', name=op.f('oauth_states_pkey'))
    )
    op.create_table('sync_logs',
    sa.Column('id', sa.TEXT(), server_default=sa.text('(gen_random_uuid())::text'), autoincrement=False, nullable=False),
    sa.Column('job_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('contact_external_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['sync_jobs.id'], name=op.f('sync_logs_job_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('sync_logs_pkey'))
    )
    op.create_table('invite_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('stage', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('goals', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('requested_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('invite_requests_pkey'))
    )
    op.create_table('network_analytics',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('metric_period', sa.TEXT(), server_default=sa.text("'all_time'::text"), autoincrement=False, nullable=True),
    sa.Column('calculated_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('network_analytics_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('network_analytics_pkey'))
    )
    op.create_table('rhizomatic_insights',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('insights_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('rhizomatic_insights_pkey'))
    )
    op.create_table('sync_jobs',
    sa.Column('id', sa.TEXT(), server_default=sa.text('(gen_random_uuid())::text'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'running'::character varying"), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('total_contacts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('processed_contacts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('new_contacts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('updated_contacts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_contacts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['contact_sources.id'], name=op.f('sync_jobs_source_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('sync_jobs_pkey'))
    )
    op.create_table('contact_sources',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.TEXT(), server_default=sa.text("'synced'::text"), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('sync_metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('sync_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_contacts_synced', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contacts.id'], name=op.f('contact_sources_contact_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('contact_sources_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('contact_sources_pkey'))
    )
    op.create_table('trust_insights',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trust_tier', sa.TEXT(), server_default=sa.text("'dormant'::text"), autoincrement=False, nullable=True),
    sa.Column('trust_score', sa.REAL(), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('reciprocity_index', sa.REAL(), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('response_time_avg', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('interaction_frequency', sa.REAL(), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('sentiment_trend', sa.TEXT(), server_default=sa.text("'neutral'::text"), autoincrement=False, nullable=True),
    sa.Column('last_calculated', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ai_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('suggested_action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.REAL(), server_default=sa.text('0.7'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contacts.id'], name=op.f('trust_insights_contact_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('trust_insights_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('trust_insights_pkey'))
    )
    # ### end Alembic commands ###
